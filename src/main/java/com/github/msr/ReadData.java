/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.msr;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)", date = "2023-03-17")
public class ReadData implements org.apache.thrift.TBase<ReadData, ReadData._Fields>, java.io.Serializable, Cloneable, Comparable<ReadData> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReadData");

    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField DELIMITER_FIELD_DESC = new org.apache.thrift.protocol.TField("delimiter", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReadDataStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReadDataTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String path; // required
    /**
     *
     * @see FileType
     */
    public @org.apache.thrift.annotation.Nullable FileType dataType; // optional
    /**
     *
     * @see Delimiter
     */
    public @org.apache.thrift.annotation.Nullable Delimiter delimiter; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        PATH((short)1, "path"),
        /**
         *
         * @see FileType
         */
        DATA_TYPE((short)2, "dataType"),
        /**
         *
         * @see Delimiter
         */
        DELIMITER((short)3, "delimiter");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // PATH
                    return PATH;
                case 2: // DATA_TYPE
                    return DATA_TYPE;
                case 3: // DELIMITER
                    return DELIMITER;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final _Fields optionals[] = {_Fields.DATA_TYPE,_Fields.DELIMITER};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.DATA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("dataType", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FileType.class)));
        tmpMap.put(_Fields.DELIMITER, new org.apache.thrift.meta_data.FieldMetaData("delimiter", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Delimiter.class)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReadData.class, metaDataMap);
    }

    public ReadData() {
    }

    public ReadData(
            java.lang.String path)
    {
        this();
        this.path = path;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReadData(ReadData other) {
        if (other.isSetPath()) {
            this.path = other.path;
        }
        if (other.isSetDataType()) {
            this.dataType = other.dataType;
        }
        if (other.isSetDelimiter()) {
            this.delimiter = other.delimiter;
        }
    }

    public ReadData deepCopy() {
        return new ReadData(this);
    }

    @Override
    public void clear() {
        this.path = null;
        this.dataType = null;
        this.delimiter = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPath() {
        return this.path;
    }

    public ReadData setPath(@org.apache.thrift.annotation.Nullable java.lang.String path) {
        this.path = path;
        return this;
    }

    public void unsetPath() {
        this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
        return this.path != null;
    }

    public void setPathIsSet(boolean value) {
        if (!value) {
            this.path = null;
        }
    }

    /**
     *
     * @see FileType
     */
    @org.apache.thrift.annotation.Nullable
    public FileType getDataType() {
        return this.dataType;
    }

    /**
     *
     * @see FileType
     */
    public ReadData setDataType(@org.apache.thrift.annotation.Nullable FileType dataType) {
        this.dataType = dataType;
        return this;
    }

    public void unsetDataType() {
        this.dataType = null;
    }

    /** Returns true if field dataType is set (has been assigned a value) and false otherwise */
    public boolean isSetDataType() {
        return this.dataType != null;
    }

    public void setDataTypeIsSet(boolean value) {
        if (!value) {
            this.dataType = null;
        }
    }

    /**
     *
     * @see Delimiter
     */
    @org.apache.thrift.annotation.Nullable
    public Delimiter getDelimiter() {
        return this.delimiter;
    }

    /**
     *
     * @see Delimiter
     */
    public ReadData setDelimiter(@org.apache.thrift.annotation.Nullable Delimiter delimiter) {
        this.delimiter = delimiter;
        return this;
    }

    public void unsetDelimiter() {
        this.delimiter = null;
    }

    /** Returns true if field delimiter is set (has been assigned a value) and false otherwise */
    public boolean isSetDelimiter() {
        return this.delimiter != null;
    }

    public void setDelimiterIsSet(boolean value) {
        if (!value) {
            this.delimiter = null;
        }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case PATH:
                if (value == null) {
                    unsetPath();
                } else {
                    setPath((java.lang.String)value);
                }
                break;

            case DATA_TYPE:
                if (value == null) {
                    unsetDataType();
                } else {
                    setDataType((FileType)value);
                }
                break;

            case DELIMITER:
                if (value == null) {
                    unsetDelimiter();
                } else {
                    setDelimiter((Delimiter)value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case PATH:
                return getPath();

            case DATA_TYPE:
                return getDataType();

            case DELIMITER:
                return getDelimiter();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case PATH:
                return isSetPath();
            case DATA_TYPE:
                return isSetDataType();
            case DELIMITER:
                return isSetDelimiter();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that instanceof ReadData)
            return this.equals((ReadData)that);
        return false;
    }

    public boolean equals(ReadData that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_path = true && this.isSetPath();
        boolean that_present_path = true && that.isSetPath();
        if (this_present_path || that_present_path) {
            if (!(this_present_path && that_present_path))
                return false;
            if (!this.path.equals(that.path))
                return false;
        }

        boolean this_present_dataType = true && this.isSetDataType();
        boolean that_present_dataType = true && that.isSetDataType();
        if (this_present_dataType || that_present_dataType) {
            if (!(this_present_dataType && that_present_dataType))
                return false;
            if (!this.dataType.equals(that.dataType))
                return false;
        }

        boolean this_present_delimiter = true && this.isSetDelimiter();
        boolean that_present_delimiter = true && that.isSetDelimiter();
        if (this_present_delimiter || that_present_delimiter) {
            if (!(this_present_delimiter && that_present_delimiter))
                return false;
            if (!this.delimiter.equals(that.delimiter))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
        if (isSetPath())
            hashCode = hashCode * 8191 + path.hashCode();

        hashCode = hashCode * 8191 + ((isSetDataType()) ? 131071 : 524287);
        if (isSetDataType())
            hashCode = hashCode * 8191 + dataType.getValue();

        hashCode = hashCode * 8191 + ((isSetDelimiter()) ? 131071 : 524287);
        if (isSetDelimiter())
            hashCode = hashCode * 8191 + delimiter.getValue();

        return hashCode;
    }

    @Override
    public int compareTo(ReadData other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetPath(), other.isSetPath());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPath()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetDataType(), other.isSetDataType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDataType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataType, other.dataType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetDelimiter(), other.isSetDelimiter());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDelimiter()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delimiter, other.delimiter);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("ReadData(");
        boolean first = true;

        sb.append("path:");
        if (this.path == null) {
            sb.append("null");
        } else {
            sb.append(this.path);
        }
        first = false;
        if (isSetDataType()) {
            if (!first) sb.append(", ");
            sb.append("dataType:");
            if (this.dataType == null) {
                sb.append("null");
            } else {
                sb.append(this.dataType);
            }
            first = false;
        }
        if (isSetDelimiter()) {
            if (!first) sb.append(", ");
            sb.append("delimiter:");
            if (this.delimiter == null) {
                sb.append("null");
            } else {
                sb.append(this.delimiter);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ReadDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ReadDataStandardScheme getScheme() {
            return new ReadDataStandardScheme();
        }
    }

    private static class ReadDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReadData> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, ReadData struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // PATH
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.path = iprot.readString();
                            struct.setPathIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // DATA_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.dataType = com.github.msr.FileType.findByValue(iprot.readI32());
                            struct.setDataTypeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // DELIMITER
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.delimiter = com.github.msr.Delimiter.findByValue(iprot.readI32());
                            struct.setDelimiterIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, ReadData struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.path != null) {
                oprot.writeFieldBegin(PATH_FIELD_DESC);
                oprot.writeString(struct.path);
                oprot.writeFieldEnd();
            }
            if (struct.dataType != null) {
                if (struct.isSetDataType()) {
                    oprot.writeFieldBegin(DATA_TYPE_FIELD_DESC);
                    oprot.writeI32(struct.dataType.getValue());
                    oprot.writeFieldEnd();
                }
            }
            if (struct.delimiter != null) {
                if (struct.isSetDelimiter()) {
                    oprot.writeFieldBegin(DELIMITER_FIELD_DESC);
                    oprot.writeI32(struct.delimiter.getValue());
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class ReadDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ReadDataTupleScheme getScheme() {
            return new ReadDataTupleScheme();
        }
    }

    private static class ReadDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReadData> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, ReadData struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetPath()) {
                optionals.set(0);
            }
            if (struct.isSetDataType()) {
                optionals.set(1);
            }
            if (struct.isSetDelimiter()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetPath()) {
                oprot.writeString(struct.path);
            }
            if (struct.isSetDataType()) {
                oprot.writeI32(struct.dataType.getValue());
            }
            if (struct.isSetDelimiter()) {
                oprot.writeI32(struct.delimiter.getValue());
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, ReadData struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
            }
            if (incoming.get(1)) {
                struct.dataType = com.github.msr.FileType.findByValue(iprot.readI32());
                struct.setDataTypeIsSet(true);
            }
            if (incoming.get(2)) {
                struct.delimiter = com.github.msr.Delimiter.findByValue(iprot.readI32());
                struct.setDelimiterIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}


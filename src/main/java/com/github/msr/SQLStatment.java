/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.msr;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)", date = "2023-03-17")
public class SQLStatment implements org.apache.thrift.TBase<SQLStatment, SQLStatment._Fields>, java.io.Serializable, Cloneable, Comparable<SQLStatment> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SQLStatment");

    private static final org.apache.thrift.protocol.TField SQL_STATMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("sql_statment", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SQLStatmentStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SQLStatmentTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String sql_statment; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String table_name; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        SQL_STATMENT((short)1, "sql_statment"),
        TABLE_NAME((short)2, "table_name");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // SQL_STATMENT
                    return SQL_STATMENT;
                case 2: // TABLE_NAME
                    return TABLE_NAME;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final _Fields optionals[] = {_Fields.TABLE_NAME};
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.SQL_STATMENT, new org.apache.thrift.meta_data.FieldMetaData("sql_statment", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SQLStatment.class, metaDataMap);
    }

    public SQLStatment() {
    }

    public SQLStatment(
            java.lang.String sql_statment)
    {
        this();
        this.sql_statment = sql_statment;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SQLStatment(SQLStatment other) {
        if (other.isSetSql_statment()) {
            this.sql_statment = other.sql_statment;
        }
        if (other.isSetTable_name()) {
            this.table_name = other.table_name;
        }
    }

    public SQLStatment deepCopy() {
        return new SQLStatment(this);
    }

    @Override
    public void clear() {
        this.sql_statment = null;
        this.table_name = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSql_statment() {
        return this.sql_statment;
    }

    public SQLStatment setSql_statment(@org.apache.thrift.annotation.Nullable java.lang.String sql_statment) {
        this.sql_statment = sql_statment;
        return this;
    }

    public void unsetSql_statment() {
        this.sql_statment = null;
    }

    /** Returns true if field sql_statment is set (has been assigned a value) and false otherwise */
    public boolean isSetSql_statment() {
        return this.sql_statment != null;
    }

    public void setSql_statmentIsSet(boolean value) {
        if (!value) {
            this.sql_statment = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTable_name() {
        return this.table_name;
    }

    public SQLStatment setTable_name(@org.apache.thrift.annotation.Nullable java.lang.String table_name) {
        this.table_name = table_name;
        return this;
    }

    public void unsetTable_name() {
        this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
        return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
        if (!value) {
            this.table_name = null;
        }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case SQL_STATMENT:
                if (value == null) {
                    unsetSql_statment();
                } else {
                    setSql_statment((java.lang.String)value);
                }
                break;

            case TABLE_NAME:
                if (value == null) {
                    unsetTable_name();
                } else {
                    setTable_name((java.lang.String)value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case SQL_STATMENT:
                return getSql_statment();

            case TABLE_NAME:
                return getTable_name();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case SQL_STATMENT:
                return isSetSql_statment();
            case TABLE_NAME:
                return isSetTable_name();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that instanceof SQLStatment)
            return this.equals((SQLStatment)that);
        return false;
    }

    public boolean equals(SQLStatment that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_sql_statment = true && this.isSetSql_statment();
        boolean that_present_sql_statment = true && that.isSetSql_statment();
        if (this_present_sql_statment || that_present_sql_statment) {
            if (!(this_present_sql_statment && that_present_sql_statment))
                return false;
            if (!this.sql_statment.equals(that.sql_statment))
                return false;
        }

        boolean this_present_table_name = true && this.isSetTable_name();
        boolean that_present_table_name = true && that.isSetTable_name();
        if (this_present_table_name || that_present_table_name) {
            if (!(this_present_table_name && that_present_table_name))
                return false;
            if (!this.table_name.equals(that.table_name))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetSql_statment()) ? 131071 : 524287);
        if (isSetSql_statment())
            hashCode = hashCode * 8191 + sql_statment.hashCode();

        hashCode = hashCode * 8191 + ((isSetTable_name()) ? 131071 : 524287);
        if (isSetTable_name())
            hashCode = hashCode * 8191 + table_name.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(SQLStatment other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.compare(isSetSql_statment(), other.isSetSql_statment());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSql_statment()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql_statment, other.sql_statment);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.compare(isSetTable_name(), other.isSetTable_name());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTable_name()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("SQLStatment(");
        boolean first = true;

        sb.append("sql_statment:");
        if (this.sql_statment == null) {
            sb.append("null");
        } else {
            sb.append(this.sql_statment);
        }
        first = false;
        if (isSetTable_name()) {
            if (!first) sb.append(", ");
            sb.append("table_name:");
            if (this.table_name == null) {
                sb.append("null");
            } else {
                sb.append(this.table_name);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class SQLStatmentStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public SQLStatmentStandardScheme getScheme() {
            return new SQLStatmentStandardScheme();
        }
    }

    private static class SQLStatmentStandardScheme extends org.apache.thrift.scheme.StandardScheme<SQLStatment> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, SQLStatment struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // SQL_STATMENT
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.sql_statment = iprot.readString();
                            struct.setSql_statmentIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // TABLE_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.table_name = iprot.readString();
                            struct.setTable_nameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, SQLStatment struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.sql_statment != null) {
                oprot.writeFieldBegin(SQL_STATMENT_FIELD_DESC);
                oprot.writeString(struct.sql_statment);
                oprot.writeFieldEnd();
            }
            if (struct.table_name != null) {
                if (struct.isSetTable_name()) {
                    oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
                    oprot.writeString(struct.table_name);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class SQLStatmentTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public SQLStatmentTupleScheme getScheme() {
            return new SQLStatmentTupleScheme();
        }
    }

    private static class SQLStatmentTupleScheme extends org.apache.thrift.scheme.TupleScheme<SQLStatment> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, SQLStatment struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetSql_statment()) {
                optionals.set(0);
            }
            if (struct.isSetTable_name()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetSql_statment()) {
                oprot.writeString(struct.sql_statment);
            }
            if (struct.isSetTable_name()) {
                oprot.writeString(struct.table_name);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, SQLStatment struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.sql_statment = iprot.readString();
                struct.setSql_statmentIsSet(true);
            }
            if (incoming.get(1)) {
                struct.table_name = iprot.readString();
                struct.setTable_nameIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

